{"version":3,"sources":["assets\\script\\Player_Move.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","type","AudioClip","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","jumpAction","node","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","start","update","dt","Math","abs","x"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 主角跳跃高度\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n         // 跳跃音效资源\r\n        jumpAudio: {\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n    \r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n    setJumpAction: function () {\r\n         // 跳跃上升\r\n         var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\r\n         // 下落\r\n         var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\r\n         // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\r\n         var callback = cc.callFunc(this.playJumpSound, this);\r\n         // 不断重复，而且每次完成落地动作后调用回调来播放声音\r\n         return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\r\n    },\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n    onKeyDown (event) {\r\n        // set a flag when key pressed\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp (event) {\r\n        // unset a flag when key released\r\n        switch(event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n    onLoad() {\r\n        // 初始化跳跃动作\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);   \r\n    },\r\n\r\n    onDestroy () {\r\n        // 取消键盘输入监听\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n    },\r\n\r\n    start () {\r\n        \r\n    },\r\n\r\n    update (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n   },\r\n});\r\n"]}