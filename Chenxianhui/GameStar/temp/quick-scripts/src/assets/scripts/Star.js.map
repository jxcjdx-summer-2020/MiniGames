{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["cc","Class","Component","properties","pickRadius","start","update","dt","getPlayerDistance","onPicked","opacityRatio","game","timer","starDuration","minOpacity","node","opacity","Math","floor","playerPos","player","getPosition","dist","position","sub","mag","spawnNewStar","gainScore","destroy"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACAC,IAAAA,UAAU,EAAE;AAFJ,GAHP;AAQL;AAEA;AAEAC,EAAAA,KAZK,mBAYI,CAER,CAdI;AAgBLC,EAAAA,MAAM,EAAE,gBAAUC,EAAV,EAAc;AAClB;AACA,QAAI,KAAKC,iBAAL,KAA2B,KAAKJ,UAApC,EAAgD;AAC5C;AACA,WAAKK,QAAL;AACA;AACH,KANiB,CAOlB;;;AACA,QAAIC,YAAY,GAAG,IAAI,KAAKC,IAAL,CAAUC,KAAV,GAAgB,KAAKD,IAAL,CAAUE,YAAjD;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKC,IAAL,CAAUC,OAAV,GAAoBF,UAAU,GAAGG,IAAI,CAACC,KAAL,CAAWR,YAAY,IAAI,MAAMI,UAAV,CAAvB,CAAjC;AACH,GA3BI;AA6BLN,EAAAA,iBAAiB,EAAE,6BAAY;AAC3B;AACA,QAAIW,SAAS,GAAG,KAAKR,IAAL,CAAUS,MAAV,CAAiBC,WAAjB,EAAhB,CAF2B,CAG3B;;AACA,QAAIC,IAAI,GAAG,KAAKP,IAAL,CAAUQ,QAAV,CAAmBC,GAAnB,CAAuBL,SAAvB,EAAkCM,GAAlC,EAAX;AACA,WAAOH,IAAP;AACH,GAnCI;AAqCLb,EAAAA,QAAQ,EAAE,oBAAW;AACjB;AACA,SAAKE,IAAL,CAAUe,YAAV,GAFiB,CAGjB;;AACA,SAAKf,IAAL,CAAUgB,SAAV,GAJiB,CAKjB;;AACA,SAAKZ,IAAL,CAAUa,OAAV;AACH;AA5CI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n        pickRadius: 0,\r\n    },\r\n    \r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // 调用收集行为\r\n            this.onPicked();\r\n            return;\r\n        }\r\n        // 根据 Game 脚本中的计时器更新星星的透明度\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    },\r\n\r\n    getPlayerDistance: function () {\r\n        // 根据 player 节点位置判断距离\r\n        var playerPos = this.game.player.getPosition();\r\n        // 根据两点位置计算两点之间距离\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    onPicked: function() {\r\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\r\n        this.game.spawnNewStar();\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore();\r\n        // 然后销毁当前星星节点\r\n        this.node.destroy();\r\n    },\r\n});\r\n"]}