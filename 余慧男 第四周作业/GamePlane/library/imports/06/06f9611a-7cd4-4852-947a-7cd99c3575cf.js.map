{"version":3,"sources":["assets\\Script\\object_pool.js"],"names":["cc","Class","Component","properties","initPool","initCount","name","prefab","NodePool","i","node","instantiate","put","recyclePool","createEnemy","parentNode","find","componentName","pool","size","get","parent","component","getComponent","init","onLoad","$base","set"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE,EAHP;AAOL;AAEAC,EAAAA,QATK,0BAaF;AAAA,8BAHCC,SAGD;AAAA,QAHCA,SAGD,+BAHa,CAGb;AAAA,QAFCC,IAED,QAFCA,IAED;AAAA,QADCC,MACD,QADCA,MACD;AACC,QAAI,eAAQD,IAAR,UAAJ,EAA0B;AAC1B,QAAIC,MAAJ,EAAa,eAAQD,IAAR,eAAwBC,MAAxB;AACb,mBAAQD,IAAR,aAAsB,IAAIN,EAAE,CAACQ,QAAP,EAAtB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAApB,EAA+B,EAAEI,CAAjC,EAAoC;AAChC,UAAIC,IAAI,GAAGV,EAAE,CAACW,WAAH,CAAe,eAAQL,IAAR,YAAf,CAAX,CADgC,CACkB;;AAClD,qBAAQA,IAAR,WAAoBM,GAApB,CAAwBF,IAAxB,EAFgC,CAED;AAClC;;AACD,WAAO,IAAP;AACH,GAtBI;AAwBLG,EAAAA,WAxBK,8BAwBsB;AAAA,QAAbP,IAAa,SAAbA,IAAa;AAAA,QAARI,IAAQ,SAARA,IAAQ;AACvB,mBAAQJ,IAAR,WAAoBM,GAApB,CAAwBF,IAAxB;AACA,WAAO,IAAP;AACH,GA3BI;AA6BLI,EAAAA,WA7BK,8BAiCF;AAAA,QAHCR,IAGD,SAHCA,IAGD;AAAA,iCAFCS,UAED;AAAA,QAFCA,UAED,iCAFcf,EAAE,CAACgB,IAAH,CAAQ,mBAAR,CAEd;AAAA,QADCC,aACD,SADCA,aACD;AACC,QAAIP,IAAI,GAAG,IAAX;AACA,QAAIQ,IAAI,GAAG,eAAQZ,IAAR,UAAX;AACA,QAAIC,MAAM,GAAG,eAAQD,IAAR,YAAb;;AACA,QAAIY,IAAI,CAACC,IAAL,KAAc,CAAlB,EAAqB;AAAE;AACnBT,MAAAA,IAAI,GAAGQ,IAAI,CAACE,GAAL,EAAP;AACH,KAFD,MAEO;AAAE;AACLV,MAAAA,IAAI,GAAGV,EAAE,CAACW,WAAH,CAAeJ,MAAf,CAAP;AACH;;AACDG,IAAAA,IAAI,CAACW,MAAL,GAAcN,UAAd,CATD,CAS2B;;AAC1B,QAAG,CAACE,aAAJ,EAAmBA,aAAa,GAAGX,IAAhB;AACnB,QAAIgB,SAAS,GAAGZ,IAAI,CAACa,YAAL,CAAkBN,aAAlB,CAAhB,CAXD,CAYC;;AACA,QAAGK,SAAS,CAACE,IAAb,EAAmBF,SAAS,CAACE,IAAV;;AACnB,QAAGF,SAAH,EAAc;AACV,aAAOA,SAAP;AACH,KAFD,MAEO;AACH,aAAOZ,IAAP;AACH;AAEJ,GArDI;AAuDLe,EAAAA,MAvDK,oBAuDK;AACNC,IAAAA,KAAK,CAACC,GAAN,CAAU,YAAV,EAAwB,IAAxB;AACH,GAzDI,CA2DL;AAEA;AAEA;;AA/DK,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        \r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    initPool ({\r\n        initCount = 1,\r\n        name,\r\n        prefab\r\n    }) {\r\n        if( this[`${name}Pool`] ) return\r\n        if( prefab ) this[`${name}Prefab`] = prefab\r\n        this[`${name}Pool`] = new cc.NodePool();\r\n        for (let i = 0; i < initCount; ++i) {\r\n            let node = cc.instantiate(this[`${name}Prefab`]); // 创建节点\r\n            this[`${name}Pool`].put(node); // 通过 put 接口放入对象池\r\n        }\r\n        return this\r\n    },\r\n\r\n    recyclePool({ name,node }) {\r\n        this[`${name}Pool`].put(node)\r\n        return this\r\n    },\r\n\r\n    createEnemy({\r\n        name,\r\n        parentNode = cc.find('Canvas/background'),\r\n        componentName\r\n    }) {\r\n        let node = null;\r\n        let pool = this[`${name}Pool`]\r\n        let prefab = this[`${name}Prefab`]\r\n        if (pool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\r\n            node = pool.get();\r\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n            node = cc.instantiate(prefab);\r\n        }\r\n        node.parent = parentNode; // 加入节点树\r\n        if(!componentName) componentName = name\r\n        let component = node.getComponent(componentName)\r\n        // console.log(component,'componentcomponentcomponent');\r\n        if(component.init) component.init()\r\n        if(component) {\r\n            return component\r\n        } else {\r\n            return node\r\n        }\r\n         \r\n    },\r\n\r\n    onLoad () {\r\n        $base.set('objectPool', this)\r\n    },\r\n\r\n    // start () {\r\n\r\n    // },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}